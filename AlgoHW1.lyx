#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extarticle
\begin_preamble
\usepackage{xcolor}
\pagecolor[rgb]{0.17,0.17,0.17} %black
\color[rgb]{1,1,1} %grey

\newfontfamily\mylistingsfont{Space Mono}
\definecolor{lbcolor}{rgb}{0.2,0.2,0.2}

\usepackage{amsfonts}


\newcommand{\me}[1]{\equiv_{#1}}
\newcommand{\s}{\hspace{.15cm}}
\newcommand{\bs}{\s\s,\s\s}
\newcommand{\ms}[1]{\underline{#1:}\\\tab}
\newcommand{\mypart}[1]{\centerline{\textbf{Part #1:}}}
\newcommand{\tab}[1][1cm]{\hspace*{#1}}
\newcommand{\denom}[1]{\frac{1}{#1}}
\newcommand{\Rmat}[1]{\mathbb{R}^{#1x#1}}
\newcommand{\inv}[1]{#1^{-1}}

\newcommand{\lamf}[1]{\lambda x.[#1]}

\title{modern algebra hw1}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1.5cm
\topmargin 1cm
\rightmargin 1cm
\bottommargin 1.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle plain
\listings_params "basicstyle={\mylistingsfont},language={C++},backgroundcolor={\color{lbcolor}},showstringspaces=false"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\series bold
\size giant
Algo HW 1
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="1">
<features booktabs="true" tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<row topspace="2cm">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Dani Bondar - 206560856
\end_layout

\end_inset
</cell>
</row>
<row topspace="1cm">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size large
Gur Telem - 206631848
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Question 1
\end_layout

\begin_layout Enumerate
A 
\begin_inset Formula $\rightarrow$
\end_inset

 B 
\begin_inset Formula $\rightarrow$
\end_inset

 C 
\begin_inset Formula $\rightarrow$
\end_inset

 F 
\begin_inset Formula $\rightarrow$
\end_inset

 D 
\begin_inset Formula $\rightarrow$
\end_inset

 E
\end_layout

\begin_layout Enumerate
A 
\begin_inset Formula $\rightarrow$
\end_inset

 B 
\begin_inset Formula $\rightarrow$
\end_inset

 F 
\begin_inset Formula $\rightarrow$
\end_inset

 C 
\begin_inset Formula $\rightarrow$
\end_inset

 D 
\begin_inset Formula $\rightarrow$
\end_inset

 E
\end_layout

\begin_layout Enumerate
F 
\begin_inset Formula $\rightarrow$
\end_inset

 B 
\begin_inset Formula $\rightarrow$
\end_inset

 D 
\begin_inset Formula $\rightarrow$
\end_inset

 C 
\begin_inset Formula $\rightarrow$
\end_inset

 A 
\begin_inset Formula $\rightarrow$
\end_inset

 E
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Section
Question 2
\end_layout

\begin_layout Enumerate
False
\end_layout

\begin_layout Enumerate
True
\end_layout

\begin_layout Enumerate
False
\end_layout

\begin_layout Enumerate
False
\end_layout

\begin_layout Enumerate
False
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Section
Question 3
\end_layout

\begin_layout Description
Idea
\end_layout

\begin_layout Standard
Better solution: We first use topological sorting algorithm to sort the
 node in the graph topologically.
 Then, we run over the nodes and check if a two consecutive nodes in the
 result, has an edge, iff they do, then there's a hamiltonian path.
\end_layout

\begin_layout Standard
Old solution (didn't have time to modify the proof): We will use the Topological
 sorting algorithm that was though in the tutorial that execute in a linear
 time complexity.
 The only change from the original algorithm would be that now, the end
 result would be a queue of vertices in a topological order, instead of
 a function (a minor implementation detail).
 The following algorithm:
\end_layout

\begin_layout Enumerate
execute the first step of the 
\begin_inset Quotes eld
\end_inset

Topological sorting algorithm
\begin_inset Quotes erd
\end_inset

 - find the root vertices.
 if there more then one root vertex then stop the algorithm and return False.
 There is at list one root vertex - the graph is DAG and thus has no cycles.
\end_layout

\begin_deeper
\begin_layout Enumerate
after every removal of the edges check if there's more then one root in
 the graph - if there is, return False.
\end_layout

\begin_layout Enumerate
continue until there is no more vertices left.
\end_layout

\end_deeper
\begin_layout Subparagraph
Correctness: 
\end_layout

\begin_layout Proof
New way: The fist direction is obvious, if there is an edge between two
 consecutive nodes in the result, then this is the hamiltonian path.
\end_layout

\begin_layout Proof
The second direction: if there are two consecutive nodes 
\begin_inset Formula $v,u\in V$
\end_inset

 without an edge.
 BWOD there's an hamiltonian path.
\end_layout

\begin_layout Proof
I don't have enough time to explain enough but I'll try to fix as much as
 I can.
 The way re defined the algorithm, means we're backing from the recursion
 when we can't continue, then we add the node to the sorted list.
 Since the graph is cycleless, then there's a single hamiltonian path (I
 think).
 Thus, wlog, 
\begin_inset Formula $v$
\end_inset

 is before 
\begin_inset Formula $u$
\end_inset

 in the path.
 Since 
\begin_inset Formula $v,u$
\end_inset

 are consecutive and there's no edge between them, then it means that 
\begin_inset Formula $v$
\end_inset

 is a node with out degree of 
\begin_inset Formula $0$
\end_inset

.
 Meaning it must be the last node in the hamiltonian path.
 In contradiction to the 
\begin_inset Formula $u$
\end_inset

 coming after 
\begin_inset Formula $v$
\end_inset

.
\end_layout

\begin_layout Proof
Regarding the only a single hamiltonian path.
 If there were two different paths, then there must be a pair of node 
\begin_inset Formula $u,v$
\end_inset

 that in the first path appear 
\begin_inset Formula $u$
\end_inset

 and then 
\begin_inset Formula $v$
\end_inset

, and in the second path, the other way around.
 Other wise, you can look at each two consecutive nodes, and get the same
 order of nodes, i.e.
 the same path.
\end_layout

\begin_layout Proof
This concludes the proof.
\end_layout

\begin_layout Standard
Old proof:
\end_layout

\begin_layout Standard
lets assume that there is more then one root in the graph.
 that means that there is no edge that enters to that edge.
 if there is more then one root the graph isn't connected and an Hamiltonian
 path cant be present.
 
\end_layout

\begin_layout Standard
Lets now assume that in the course of the algorithm more then one root vertex
 appears - in that case, an Hamiltonian path cant be present either.
 lets name the two root vertices 
\begin_inset Formula $u$
\end_inset

and 
\begin_inset Formula $v$
\end_inset

.
 if the initial graph had in-fact an Hamiltonian path that means that there
 was a route from, let say, 
\begin_inset Formula $u\rightarrow v$
\end_inset

.
 Because none of the edges between the root vertices (
\begin_inset Formula $u$
\end_inset

 and 
\begin_inset Formula $v$
\end_inset

), and the rest of the remaining vertices in the graph, haven't been removed
 - the original route 
\begin_inset Formula $u\rightarrow v$
\end_inset

 went through the deleted vertices.
 lets name the first vertex that exits 
\begin_inset Formula $u$
\end_inset

 in the route 
\begin_inset Formula $u\rightarrow v$
\end_inset

 as 
\begin_inset Formula $w$
\end_inset

.
 
\begin_inset Formula $w$
\end_inset

 was detected before 
\begin_inset Formula $u$
\end_inset

 (because he was a root vertex), but if there's a route 
\begin_inset Formula $u\rightarrow w$
\end_inset

 , there's a circular route in the graph (
\begin_inset Formula $w\rightarrow u\rightarrow w$
\end_inset

), and thats in contradiction to the DAG.
 
\end_layout

\begin_layout Standard
in the end, if at no point we had two roots in the same time, we can say
 that the Hamiltonian path is the order of the roots (the queue).
 and thus we fund an Hamiltonian path.
\end_layout

\begin_layout Subparagraph
Complexity:
\end_layout

\begin_layout Standard
As was tough in the tutorial, the time complexity of the Topological sorting
 algorithm is linear to the input graph - 
\begin_inset Formula $O(\left|V\right|+\left|E\right|)$
\end_inset

.
\end_layout

\begin_layout Standard
Also we have 
\begin_inset Formula $O\left(\left|V\right|\right)$
\end_inset

 to run over the sorted nodes which doesn't add to the complexity.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Question 4
\end_layout

\begin_layout Standard
Given a graph 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 and a node 
\begin_inset Formula $s\in V$
\end_inset

, we'll return the length of the shortest cycle with an even number of nodes.
\end_layout

\begin_layout Description
Idea
\end_layout

\begin_layout Standard
We'll create a bigraph like so 
\begin_inset Formula $G'=\left(V',E'\right)$
\end_inset

.
 
\begin_inset Formula 
\[
V'=V\cup\left\{ v'\mid v\in V\backslash\left\{ s\right\} \right\} 
\]

\end_inset

 Meaning, we'll create a duplicate for each node in 
\begin_inset Formula $V$
\end_inset

, except for 
\begin_inset Formula $s$
\end_inset

.
 And
\begin_inset Formula 
\[
E'=\left\{ \left(v,u'\right),\left(v',u\right)\mid v,u\in V\backslash\left\{ s\right\} \wedge\left(v,u\right)\in E\right\} \cup\left\{ \left(v',s\right),\left(s,u'\right)\mid u,v\in V\backslash\left\{ s\right\} \wedge\left(s,u\right),\left(v,s\right)\in E\right\} 
\]

\end_inset

Meaning each original edge in 
\begin_inset Formula $G$
\end_inset

, will appear as an edge from a tagged node to a non tagged node (or the
 other way arround).
 
\begin_inset Formula $s$
\end_inset

 only has a non-tagged version, so it has a special case.
\end_layout

\begin_layout Standard
While building the graph 
\begin_inset Formula $G'$
\end_inset

, for each edge 
\begin_inset Formula $\left(v',s\right)\in E'$
\end_inset

 we add, we'll mark 
\begin_inset Formula $v'\in V'$
\end_inset

 with a boolean flag to indicate it closes a cycle.
\end_layout

\begin_layout Standard
Now, we can use the BFS algorithm to find the distances of each 
\begin_inset Formula $v\in V'$
\end_inset

 from 
\begin_inset Formula $s$
\end_inset

.
 If at one of the iterations, we reached a node that is flagged to close
 a cycle, we'll return the iteration number (first iteration is 
\begin_inset Formula $1$
\end_inset

).
\end_layout

\begin_layout Standard
Note: To avoid modifying BFS (because we don't prove correctness for the
 modified version), we can after the BFS run, get the 
\begin_inset Formula $\min\left\{ d\left(v'\right)\mid v'\in V'\wedge\left(v',s\right)\in E'\right\} +1$
\end_inset

.
 This will get the minimal length path to a node that points to 
\begin_inset Formula $s$
\end_inset

 (
\begin_inset Formula $+1$
\end_inset

 for the edge that gets us back to 
\begin_inset Formula $s$
\end_inset

).
\end_layout

\begin_layout Description
Complexity
\end_layout

\begin_layout Standard
The runtime complexity of the algorithm is
\begin_inset Formula 
\[
O\left(\underset{Building\,G'}{\underbrace{n+m}}+\underset{BFS}{\underbrace{2n+2m}}\right)=O\left(3n+3m\right)=O\left(n+m\right)
\]

\end_inset

This can actually be further optimized if we used the SCC algorithm to find
 the only the SCC that contains 
\begin_inset Formula $s$
\end_inset

.
 The optimized solution would be 
\begin_inset Formula $O\left(m\right)$
\end_inset

.
\end_layout

\begin_layout Standard
For that solution we start from 
\begin_inset Formula $s$
\end_inset

 and stop when we need to need to start the next CC.
 Thus, we're left with 
\begin_inset Formula $O\left(m\right)$
\end_inset

 nodes so 
\begin_inset Formula $\left|V'\right|=O\left(m\right)$
\end_inset

.
 Then 
\begin_inset Formula $O\left(n+m\right)=O\left(2m\right)=O\left(m\right)$
\end_inset

.
 Then we can continue with the algorithm in the idea normally with approximately
 the same number of nodes and edges.
 But let's not focus on that.
 It's way too much work for this assignment.
\end_layout

\begin_layout Standard
For the BFS we have 
\begin_inset Formula $2n+2m$
\end_inset

 because we doubled the number of nodes and edges (almost).
 Because each node (except 
\begin_inset Formula $s$
\end_inset

) has a tagged version, and each edge 
\begin_inset Formula $\left(u,v\right)$
\end_inset

 in the original graph, has two versions in 
\begin_inset Formula $G'$
\end_inset

 (
\begin_inset Formula $\left(u',v\right),\left(u,v'\right)$
\end_inset

).
\end_layout

\begin_layout Description
Correctness
\end_layout

\begin_layout Standard
Let's put aside the optimization part.
\end_layout

\begin_layout Standard
Like taught in the tutorial, path in a bigraph is of even length iff it
 starts and ends in the same side.
 So any cycle in our bigraph (ofc starts and ends in the same side) so we
 just need to find the minimal length cycle in our bigraph.
\end_layout

\begin_layout Proof
First, let's make sure what we have here is actually a bigraph.
 The two parts of our bigraph are 
\begin_inset Formula $\left\{ v'\mid v\in V\backslash\left\{ s\right\} \right\} $
\end_inset

 and 
\begin_inset Formula $\left\{ v\in V\right\} $
\end_inset

.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $\left(v,u\right)\in E'$
\end_inset

.
 And let's assume that 
\begin_inset Formula $v\in V$
\end_inset

 (i.e.
 un-tagged).
 According to 
\begin_inset Formula $E'$
\end_inset

's definition, if 
\begin_inset Formula $v=s$
\end_inset

, then 
\begin_inset Formula $u$
\end_inset

 must be in the tagged side (see right part of the definition).
\end_layout

\begin_layout Proof
If, on the other hand, 
\begin_inset Formula $v\neq s$
\end_inset

, then it is only part of the edge of the form 
\begin_inset Formula $\forall u\in V.\;\forall\left(v,u\right)\in E:\left(v,u'\right)$
\end_inset

 (see right part of the definition).
\end_layout

\begin_layout Proof
Now, if 
\begin_inset Formula $v\in V$
\end_inset

 (i.e.
 
\begin_inset Formula $v$
\end_inset

 is tagged), then 
\begin_inset Formula $\exists t\in V:v=t'\neq s$
\end_inset

.
 But then, 
\begin_inset Formula $v=t'$
\end_inset

 is only part of edge of the form 
\begin_inset Formula $\forall u\in V.\;\forall\left(t,u\right)\in E:\left(t',u\right)$
\end_inset

.
 Thus again 
\begin_inset Formula $v,u$
\end_inset

 are in opposite sides of the bigraph.
\end_layout

\begin_layout Standard
Now that we know the graph is a bigraph, and that we just need to find the
 minimal cycle, we can run BFS until we encounter a node with the flag that
 indicated it has an edge to 
\begin_inset Formula $s$
\end_inset

.
 This node must ofc be tagged but it's not relevant.
\end_layout

\begin_layout Standard
We'll make sure to start the BFS from 
\begin_inset Formula $s$
\end_inset

 (this is allowed to the freedom degree we have in the BFS).
 The path we'll get (along with the edge from the final node 
\begin_inset Formula $u$
\end_inset

 back to 
\begin_inset Formula $s$
\end_inset

) is a cycle (and as mentioned before, of even length).
\end_layout

\begin_layout Proof
Let's prove that the cycle is truly the shortest cycle.
\end_layout

\begin_layout Proof
Let's assume that we found a cycle (i.e.
 a node with the cycle flag on) in the 
\begin_inset Formula $k$
\end_inset

-th iteration of BFS.
 BWOC, there's a shorter cycle.
\end_layout

\begin_layout Proof
Let's assume that the last node (the one before 
\begin_inset Formula $s$
\end_inset

 again) in the cycle we found is 
\begin_inset Formula $u$
\end_inset

.
 Now let's assume that the last node in the shortest cycle (different one
 because of the assumption) is 
\begin_inset Formula $v$
\end_inset

.
\end_layout

\begin_layout Proof
Since we found 
\begin_inset Formula $u$
\end_inset

 in the 
\begin_inset Formula $k$
\end_inset

-th iteration (and this is the first cycle we found), its distance from
 
\begin_inset Formula $s$
\end_inset

 is 
\begin_inset Formula $k$
\end_inset

 (
\begin_inset Formula $\pm1$
\end_inset

 depending on how you count).
 But 
\begin_inset Formula $v$
\end_inset

 is a shorter cycle, so the distance of 
\begin_inset Formula $v$
\end_inset

 from 
\begin_inset Formula $s$
\end_inset

 (marked 
\begin_inset Formula $k'$
\end_inset

) must be 
\begin_inset Formula $k'<k$
\end_inset

.
 Meaning we already found the node 
\begin_inset Formula $v$
\end_inset

 before finding 
\begin_inset Formula $u$
\end_inset

.
 This means we found a cycle ending in 
\begin_inset Formula $s$
\end_inset

 before the 
\begin_inset Formula $k$
\end_inset

-th iteration.
 In contradiction to the first cycle found in the 
\begin_inset Formula $k$
\end_inset

-th iteration.
\end_layout

\begin_layout Standard
Since the cycle is minimal, 
\begin_inset Formula $s$
\end_inset

 appears in it only once, because if it appeared twice, we could've just
 ended the cycle on the first appearance and ended up with a shorter cycle.
\end_layout

\end_body
\end_document
